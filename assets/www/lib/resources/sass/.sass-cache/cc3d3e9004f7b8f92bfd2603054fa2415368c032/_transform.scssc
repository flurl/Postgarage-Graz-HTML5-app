3.2.0.alpha.11 (Bleeding Edge)
1faeeb68ccdcb0b2c4cbe63133e1285a536c5067
o:Sass::Tree::RootNode
:
@linei:@template"öH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari is the only browser that currently supports 3D transforms.
// Because of that it can be important to control whether a given 2D transform
// uses the full range of experimental browser prefixes, or only the 3D list.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Official **(Only Safari Supports 3D perspective)**

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:@children[io:Sass::Tree::ImportNode
;i;0;[ :@imported_filename"shared:@options{ o:Sass::Tree::CommentNode;i:@value"/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari is the only browser that currently supports 3D transforms.
 * Because of that it can be important to control whether a given 2D transform
 * uses the full range of experimental browser prefixes, or only the 3D list.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Official **(Only Safari Supports 3D perspective)** */;[ :@silenti :@lines[ :
@loud0;@o;;i;"¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */;[ ;i ;[ ;0;@o;;i;"Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */;[ ;i ;[ ;0;@o;;i ;"p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */;[ ;i ;[ ;0;@o;;i4;"a/* Defaults ------------------------------------------------------------------
 * @doc on */;[ ;i ;[ ;0;@o;;i7;"./* The default x-origin for transforms */;[ ;i ;[ ;0;@o:Sass::Tree::VariableNode;i8;[ :@guarded"!default:
@name"default-origin-x:
@expro:Sass::Script::Number;i8;i7:@numerator_units["%:@original"50%:@denominator_units[ ;@;@o;;i9;"./* The default y-origin for transforms */;[ ;i ;[ ;0;@o;;i:;[ ;"!default;"default-origin-y;o;;i:;i7;["%;"50%;[ ;@;@o;;i;;"./* The default z-origin for transforms */;[ ;i ;[ ;0;@o;;i<;[ ;"!default;"default-origin-z;o;;i<;i7;["%;"50%;[ ;@;@o;;i?;"//* The default x-multiplier for scaling */;[ ;i ;[ ;0;@o;;i@;[ ;"!default;"default-scale-x;o;;i@;f	1.25;[ ;"	1.25;[ ;@;@o;;iA;"//* The default y-multiplier for scaling */;[ ;i ;[ ;0;@o;;iB;[ ;"!default;"default-scale-y;o:Sass::Script::Variable	;iB;"default-scale-x:@underscored_name"default_scale_x;@;@o;;iC;"//* The default z-multiplier for scaling */;[ ;i ;[ ;0;@o;;iD;[ ;"!default;"default-scale-z;o;	;iD;"default-scale-x;"default_scale_x;@;@o;;iG;"*/* The default angle for rotations */;[ ;i ;[ ;0;@o;;iH;[ ;"!default;"default-rotate;o;;iH;i2;["deg;"
45deg;[ ;@;@o;;iK;"</* The default x-vector for the axis of 3d rotations */;[ ;i ;[ ;0;@o;;iL;[ ;"!default;"default-vector-x;o;;iL;i;[ ;"1;@S;@;@o;;iM;"</* The default y-vector for the axis of 3d rotations */;[ ;i ;[ ;0;@o;;iN;[ ;"!default;"default-vector-y;o;;iN;i;[ ;"1;@S;@;@o;;iO;"</* The default z-vector for the axis of 3d rotations */;[ ;i ;[ ;0;@o;;iP;[ ;"!default;"default-vector-z;o;;iP;i;[ ;"1;@S;@;@o;;iS;"0/* The default x-length for translations */;[ ;i ;[ ;0;@o;;iT;[ ;"!default;"default-translate-x;o;;iT;i;["em;"1em;[ ;@;@o;;iU;"0/* The default y-length for translations */;[ ;i ;[ ;0;@o;;iV;[ ;"!default;"default-translate-y;o;	;iV;"default-translate-x;"default_translate_x;@;@o;;iW;"0/* The default z-length for translations */;[ ;i ;[ ;0;@o;;iX;[ ;"!default;"default-translate-z;o;	;iX;"default-translate-x;"default_translate_x;@;@o;;i[;"*/* The default x-angle for skewing */;[ ;i ;[ ;0;@o;;i\;[ ;"!default;"default-skew-x;o;;i\;i
;["deg;"	5deg;[ ;@;@o;;i];"*/* The default y-angle for skewing */;[ ;i ;[ ;0;@o;;i^;[ ;"!default;"default-skew-y;o;;i^;i
;["deg;"	5deg;[ ;@;@o;;ia;"/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */;[ ;i ;[ ;0;@o:Sass::Tree::MixinDefNode;il;[o;;im;[ ;0;"only3d;o:Sass::Script::Operation
;im:@operand2o;
;im;o;;im;i;[ ;"2;@S;@:@operator:gt:@operand1o:Sass::Script::Funcall
;im:
@args[o;!
;im;"[o;	;im;"origin;"origin;@;"-compass-list;@:@keywords{ ;"-compass-list-size;@;#{ ;@;:or; o;	;im;"only3d;"only3d;@;@;@u:Sass::Tree::IfNode [o:Sass::Script::Variable	:
@linein:
@name"only3d:@underscored_name"only3d:@options{ u:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:
@lineiu:@children[ :
@args[o:Sass::Script::String	;is:@value"transform-origin:
@type:identifier:@options{ o:Sass::Script::Variable	;is:
@name"origin:@underscored_name"origin;@o;		;it;
"	-moz;;;@o;		;it;
"-webkit;;;@o;		;it;
"-o;;;@o;		;it;
"-ms;;;@o:!Sass::Script::UnaryOperation	;it:@operando;		;it;
"-khtml;;;@:@operator:not;@o;		;it;
"official;;;@;"experimental;@:@keywords{ [o:Sass::Tree::MixinNode;iq:@children[ :
@args[o:Sass::Script::String	;io:@value"transform-origin:
@type:identifier;	@	o; 	;io;"origin;"origin;	@	o:!Sass::Script::UnaryOperation	;ip:@operando;	;ip;"	-moz;;;	@	:@operator:not;	@	o;	;ip;"-webkit;;;	@	o;	;ip;o;	;ip;"-o;;;	@	;;;	@	o;	;ip;o;	;ip;"-ms;;;	@	;;;	@	o;	;ip;o;	;ip;"-khtml;;;	@	;;;	@	o;	;ip;"official;;;	@	;"experimental;	@	:@keywords{ ;"[[o;;"origin;"origin;{ 0[o;;"only3d;"only3d;@ò0;"apply-origin:@has_childrenT;@o;;iy;"#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */;[ ;i ;[ ;0;@o;;i;[o;;i;[ ;0;"origin;o;!
;i;"[o:Sass::Script::String	;i;" :
@type:string;@;"unquote;@;#{ ;@u;%[o:Sass::Script::Operation
:
@linei:@operand2o:Sass::Script::Variable	;i:
@name"origin-z:@underscored_name"origin_z:@options{ :@operator:or:@operand1o; 
;i;o;	;i;	"origin-y;
"origin_y;@
;;;o;	;i;	"origin-x;
"origin_x;@
;@
;@
0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:
@linei:
@name"origin-x:@underscored_name"origin_x:@options{ u:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:
@linei:@children[ :@guarded0:
@name"origin:
@expro:Sass::Script::Number;i:@valuei7:@numerator_units["%:@original"50%:@denominator_units[ :@options{ ;@[o:Sass::Tree::VariableNode;i:@children[ :@guarded0;"origin:
@expro; 	;i;"origin-x;"origin_x;	@	;	@	u;Þ[o:Sass::Script::Variable	:
@linei:
@name"origin-y:@underscored_name"origin_y:@options{ u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:
@linei:
@name"origin-z:@underscored_name"origin_z:@options{ 0[o:Sass::Tree::VariableNode;i:@children[ :@guarded0;"origin:
@expro:Sass::Script::List	;i:@value[o; 	;i;"origin;"origin;	@	o:Sass::Script::Number;i;i7:@numerator_units["%:@original"50%:@denominator_units[ ;	@	:@separator:
space;	{ ;	@	[o:Sass::Tree::VariableNode;i:@children[ :@guarded0;"origin:
@expro:Sass::Script::List	;i:@value[o; 	;i;"origin;"origin;	@	o; 	;i;"origin-y;"origin_y;	@	:@separator:
space;	{ ;	@	u;5[o:Sass::Script::Variable	:
@linei:
@name"origin-z:@underscored_name"origin_z:@options{ 0[o:Sass::Tree::VariableNode;i:@children[ :@guarded0;"origin:
@expro:Sass::Script::List	;i:@value[o; 	;i;"origin;"origin;	@	o; 	;i;"origin-z;"origin_z;	@	:@separator:
space;	{ ;	@	o:Sass::Tree::MixinNode;i:@children[ :
@args[o;	;i;	"origin;
"origin;@
o;	;i;	"only3d;
"only3d;@
;	"apply-origin;@
:@keywords{ ;"[	[o;;"origin-x;"origin_x;{ o;	;i|;"default-origin-x;"default_origin_x;@[o;;"origin-y;"origin_y;@o;	;i};"default-origin-y;"default_origin_y;@[o;;"origin-z;"origin_z;@o:Sass::Script::Bool;i~;F;@[o;;"only3d;"only3d;@o;!
;i;"[o;	;i;"origin-z;"origin_z;@o;*;i;T;@o;*;i;F;@;"if;@;#{ ;"transform-origin;&T;@o;;i;"¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */;[ ;i ;[ ;0;@o;;i;[u;%6[o:Sass::Script::Variable	:
@linei:
@name"only3d:@underscored_name"only3d:@options{ u:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:
@linei:@children[ :
@args[o:Sass::Script::String	;i:@value"transform:
@type:identifier:@options{ o:Sass::Script::Variable	;i:
@name"transform:@underscored_name"transform;@o;		;i;
"	-moz;;;@o;		;i;
"-webkit;;;@o;		;i;
"-o;;;@o;		;i;
"-ms;;;@o:!Sass::Script::UnaryOperation	;i:@operando;		;i;
"-khtml;;;@:@operator:not;@o;		;i;
"official;;;@;"experimental;@:@keywords{ [o:Sass::Tree::MixinNode;i:@children[ :
@args[o:Sass::Script::String	;i:@value"transform:
@type:identifier;	@	o; 	;i;"transform;"transform;	@	o:!Sass::Script::UnaryOperation	;i:@operando;	;i;"	-moz;;;	@	:@operator:not;	@	o;	;i;"-webkit;;;	@	o;	;i;o;	;i;"-o;;;	@	;;;	@	o;	;i;o;	;i;"-ms;;;	@	;;;	@	o;	;i;o;	;i;"-khtml;;;	@	;;;	@	o;	;i;"official;;;	@	;"experimental;	@	:@keywords{ ;"[[o;;"transform;"transform;{ 0[o;;"only3d;"only3d;@7o;*;i;F;@7;"transform;&T;@o;;i;"D/* Shortcut to target all browsers with 2D transform support */;[ ;i ;[ ;0;@o;;i ;[o:Sass::Tree::MixinNode;i¡;[ ;"[o;	;i¡;"
trans;"
trans;@o;*;i¡;F;@;"transform;@;#{ ;"[[o;;"
trans;"
trans;{ 0;"transform2d;&T;@o;;i¤;"E/* Shortcut to target only browsers with 3D transform support */;[ ;i ;[ ;0;@o;;i¥;[o;+;i¦;[ ;"[o;	;i¦;"
trans;"
trans;@o;*;i¦;T;@;"transform;@;#{ ;"[[o;;"
trans;"
trans;{ 0;"transform3d;&T;@o;;i©;"m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */;[ ;i ;[ ;0;@o;;i­;"`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */;[ ;i ;[ ;0;@o;;i´;[o;+;i·;[ ;"[o;'	;iµ;"perspective;(:identifier;@o;	;iµ;"p;"p;@o:!Sass::Script::UnaryOperation	;i¶:@operando;'	;i¶;"	-moz;(;,;@;:not;@o;'	;i¶;"-webkit;(;,;@o;-	;i¶;.o;'	;i¶;"-o;(;,;@;;/;@o;-	;i¶;.o;'	;i¶;"-ms;(;,;@;;/;@o;-	;i¶;.o;'	;i¶;"-khtml;(;,;@;;/;@o;'	;i¶;"official;(;,;@;"experimental;@;#{ ;"[[o;;"p;"p;{ 0;"perspective;&T;@o;;iº;"¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */;[ ;i ;[ ;0;@o;;i¿;[o;+;iÂ;[ ;"[o;'	;iÀ;"perspective-origin;(;,;@o;	;iÀ;"origin;"origin;@o;-	;iÁ;.o;'	;iÁ;"	-moz;(;,;@;;/;@o;'	;iÁ;"-webkit;(;,;@o;-	;iÁ;.o;'	;iÁ;"-o;(;,;@;;/;@o;-	;iÁ;.o;'	;iÁ;"-ms;(;,;@;;/;@o;-	;iÁ;.o;'	;iÁ;"-khtml;(;,;@;;/;@o;'	;iÁ;"official;(;,;@;"experimental;@;#{ ;"[[o;;"origin;"origin;{ o;;i¿;i7;["%;"50%;[ ;@º;"perspective-origin;&T;@o;;iÅ;"÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */;[ ;i ;[ ;0;@o;;iË;[o;+;iÎ;[ ;"[o;'	;iÌ;"transform-style;(;,;@o;	;iÌ;"
style;"
style;@o;-	;iÍ;.o;'	;iÍ;"	-moz;(;,;@;;/;@o;'	;iÍ;"-webkit;(;,;@o;-	;iÍ;.o;'	;iÍ;"-o;(;,;@;;/;@o;-	;iÍ;.o;'	;iÍ;"-ms;(;,;@;;/;@o;-	;iÍ;.o;'	;iÍ;"-khtml;(;,;@;;/;@o;'	;iÍ;"official;(;,;@;"experimental;@;#{ ;"[[o;;"
style;"
style;{ o;'	;iË;"preserve-3d;(;,;@æ;"transform-style;&T;@o;;iÑ;"ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */;[ ;i ;[ ;0;@o;;i×;[o;+;iÚ;[ ;"[o;'	;iØ;"backface-visibility;(;,;@o;	;iØ;"visibility;"visibility;@o;-	;iÙ;.o;'	;iÙ;"	-moz;(;,;@;;/;@o;'	;iÙ;"-webkit;(;,;@o;-	;iÙ;.o;'	;iÙ;"-o;(;,;@;;/;@o;-	;iÙ;.o;'	;iÙ;"-ms;(;,;@;;/;@o;-	;iÙ;.o;'	;iÙ;"-khtml;(;,;@;;/;@o;'	;iÙ;"official;(;,;@;"experimental;@;#{ ;"[[o;;"visibility;"visibility;{ o;'	;i×;"hidden;(;,;@;"backface-visibility;&T;@o;;iÝ;"S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */;[ ;i ;[ ;0;@o;;iä;"a/* Scale ---------------------------------------------------------------------
 * @doc on */;[ ;i ;[ ;0;@o;;iç;"¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;iõ;[o;;iö;[ ;0;"
trans;o;!
;iö;"[o;	;iö;"scale-x;"scale_x;@o;	;iö;"scale-y;"scale_y;@;"
scale;@;#{ ;@u;%[o:Sass::Script::Variable	:
@linei÷:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i÷:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i÷:@value[o:Sass::Script::Funcall
;i÷:
@args[o; 	;i÷;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i÷;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;iø;[ ;"[o;	;iø;"
trans;"
trans;@o;	;iø;"only3d;"only3d;@;"transform;@;#{ ;"[	[o;;"scale-x;"scale_x;{ o;	;iñ;"default-scale-x;"default_scale_x;@?[o;;"scale-y;"scale_y;@?o;	;iò;"scale-x;"scale_x;@?[o;;"perspective;"perspective;@?o;*;ió;F;@?[o;;"only3d;"only3d;@?o;*;iô;F;@?;"
scale;&T;@o;;iû;"¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;i;[o;;i;[ ;0;"
trans;o;!
;i;"[o;	;i;"
scale;"
scale;@;"scaleX;@;#{ ;@u;%[o:Sass::Script::Variable	:
@linei:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i:@value[o:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;i;[ ;"[o;	;i;"
trans;"
trans;@o;	;i;"only3d;"only3d;@;"transform;@;#{ ;"[[o;;"
scale;"
scale;{ o;	;i ;"default-scale-x;"default_scale_x;@v[o;;"perspective;"perspective;@vo;*;i;F;@v[o;;"only3d;"only3d;@vo;*;i;F;@v;"scaleX;&T;@o;;i	;"¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;i;[o;;i;[ ;0;"
trans;o;!
;i;"[o;	;i;"
scale;"
scale;@;"scaleY;@;#{ ;@u;%[o:Sass::Script::Variable	:
@linei:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i:@value[o:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;i;[ ;"[o;	;i;"
trans;"
trans;@o;	;i;"only3d;"only3d;@;"transform;@;#{ ;"[[o;;"
scale;"
scale;{ o;	;i;"default-scale-y;"default_scale_y;@¦[o;;"perspective;"perspective;@¦o;*;i;F;@¦[o;;"only3d;"only3d;@¦o;*;i;F;@¦;"scaleY;&T;@o;;i;"/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;i;[o;;i;[ ;0;"
trans;o;!
;i;"[o;	;i;"
scale;"
scale;@;"scaleZ;@;#{ ;@u;%[o:Sass::Script::Variable	:
@linei :
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i :@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i :@value[o:Sass::Script::Funcall
;i :
@args[o; 	;i ;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i ;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;i!;[ ;"[o;	;i!;"
trans;"
trans;@;"transform3d;@;#{ ;"[[o;;"
scale;"
scale;{ o;	;i;"default-scale-z;"default_scale_z;@Ó[o;;"perspective;"perspective;@Óo;*;i;F;@Ó;"scaleZ;&T;@o;;i$;"·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;i-;[o;;i.;[ ;0;"
trans;o;!
;i.;"[o;	;i.;"scale-x;"scale_x;@o;	;i.;"scale-y;"scale_y;@o;	;i.;"scale-z;"scale_z;@;"scale3d;@;#{ ;@u;%[o:Sass::Script::Variable	:
@linei/:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i/:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i/:@value[o:Sass::Script::Funcall
;i/:
@args[o; 	;i/;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i/;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;i0;[ ;"[o;	;i0;"
trans;"
trans;@;"transform3d;@;#{ ;"[	[o;;"scale-x;"scale_x;{ o;	;i);"default-scale-x;"default_scale_x;@[o;;"scale-y;"scale_y;@o;	;i*;"default-scale-y;"default_scale_y;@[o;;"scale-z;"scale_z;@o;	;i+;"default-scale-z;"default_scale_z;@[o;;"perspective;"perspective;@o;*;i,;F;@;"scale3d;&T;@o;;i3;"m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */;[ ;i ;[ ;0;@o;;i7;"ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;i@;[o;;iA;[ ;0;"
trans;o;!
;iA;"[o;	;iA;"rotate;"rotate;@;"rotate;@;#{ ;@u;%[o:Sass::Script::Variable	:
@lineiB:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;iB:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;iB:@value[o:Sass::Script::Funcall
;iB:
@args[o; 	;iB;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;iB;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;iC;[ ;"[o;	;iC;"
trans;"
trans;@o;	;iC;"only3d;"only3d;@;"transform;@;#{ ;"[[o;;"rotate;"rotate;{ o;	;i=;"default-rotate;"default_rotate;@>[o;;"perspective;"perspective;@>o;*;i>;F;@>[o;;"only3d;"only3d;@>o;*;i?;F;@>;"rotate;&T;@o;;iF;"/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;iM;[o;+;iN;[ ;"[o;	;iN;"rotate;"rotate;@o;	;iN;"perspective;"perspective;@o;	;iN;"only3d;"only3d;@;"rotate;@;#{ ;"[[o;;"rotate;"rotate;{ o;	;iJ;"default-rotate;"default_rotate;@f[o;;"perspective;"perspective;@fo;*;iK;F;@f[o;;"only3d;"only3d;@fo;*;iL;F;@f;"rotateZ;&T;@o;;iQ;"¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;iX;[o;;iY;[ ;0;"
trans;o;!
;iY;"[o;	;iY;"rotate;"rotate;@;"rotateX;@;#{ ;@u;%[o:Sass::Script::Variable	:
@lineiZ:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;iZ:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;iZ:@value[o:Sass::Script::Funcall
;iZ:
@args[o; 	;iZ;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;iZ;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;i[;[ ;"[o;	;i[;"
trans;"
trans;@;"transform3d;@;#{ ;"[[o;;"rotate;"rotate;{ o;	;iV;"default-rotate;"default_rotate;@[o;;"perspective;"perspective;@o;*;iW;F;@;"rotateX;&T;@o;;i^;"§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;ie;[o;;if;[ ;0;"
trans;o;!
;if;"[o;	;if;"rotate;"rotate;@;"rotateY;@;#{ ;@u;%[o:Sass::Script::Variable	:
@lineig:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;ig:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;ig:@value[o:Sass::Script::Funcall
;ig:
@args[o; 	;ig;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;ig;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;ih;[ ;"[o;	;ih;"
trans;"
trans;@;"transform3d;@;#{ ;"[[o;;"rotate;"rotate;{ o;	;ic;"default-rotate;"default_rotate;@»[o;;"perspective;"perspective;@»o;*;id;F;@»;"rotateY;&T;@o;;ik;"¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;ix;[o;;iy;[ ;0;"
trans;o;!
;iy;"[	o;	;iy;"vector-x;"vector_x;@o;	;iy;"vector-y;"vector_y;@o;	;iy;"vector-z;"vector_z;@o;	;iy;"rotate;"rotate;@;"rotate3d;@;#{ ;@u;%[o:Sass::Script::Variable	:
@lineiz:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;iz:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;iz:@value[o:Sass::Script::Funcall
;iz:
@args[o; 	;iz;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;iz;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;i{;[ ;"[o;	;i{;"
trans;"
trans;@;"transform3d;@;#{ ;"[
[o;;"vector-x;"vector_x;{ o;	;is;"default-vector-x;"default_vector_x;@ì[o;;"vector-y;"vector_y;@ìo;	;it;"default-vector-y;"default_vector_y;@ì[o;;"vector-z;"vector_z;@ìo;	;iu;"default-vector-z;"default_vector_z;@ì[o;;"rotate;"rotate;@ìo;	;iv;"default-rotate;"default_rotate;@ì[o;;"perspective;"perspective;@ìo;*;iw;F;@ì;"rotate3d;&T;@o;;i~;"m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */;[ ;i ;[ ;0;@o;;i;"5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;i;[o;;i;[ ;0;"
trans;o;!
;i;"[o;	;i;"translate-x;"translate_x;@o;	;i;"translate-y;"translate_y;@;"translate;@;#{ ;@u;%[o:Sass::Script::Variable	:
@linei:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i:@value[o:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;i;[ ;"[o;	;i;"
trans;"
trans;@o;	;i;"only3d;"only3d;@;"transform;@;#{ ;"[	[o;;"translate-x;"translate_x;{ o;	;i;"default-translate-x;"default_translate_x;@3[o;;"translate-y;"translate_y;@3o;	;i;"default-translate-y;"default_translate_y;@3[o;;"perspective;"perspective;@3o;*;i;F;@3[o;;"only3d;"only3d;@3o;*;i;F;@3;"translate;&T;@o;;i;"³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;i;[o;;i;[ ;0;"
trans;o;!
;i;"[o;	;i;"trans-x;"trans_x;@;"translateX;@;#{ ;@u;%[o:Sass::Script::Variable	:
@linei:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i:@value[o:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;i;[ ;"[o;	;i;"
trans;"
trans;@o;	;i;"only3d;"only3d;@;"transform;@;#{ ;"[[o;;"trans-x;"trans_x;{ o;	;i;"default-translate-x;"default_translate_x;@j[o;;"perspective;"perspective;@jo;*;i;F;@j[o;;"only3d;"only3d;@jo;*;i;F;@j;"translateX;&T;@o;;i ;"³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;i¨;[o;;i©;[ ;0;"
trans;o;!
;i©;"[o;	;i©;"trans-y;"trans_y;@;"translateY;@;#{ ;@u;%[o:Sass::Script::Variable	:
@lineiª:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;iª:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;iª:@value[o:Sass::Script::Funcall
;iª:
@args[o; 	;iª;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;iª;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;i«;[ ;"[o;	;i«;"
trans;"
trans;@o;	;i«;"only3d;"only3d;@;"transform;@;#{ ;"[[o;;"trans-y;"trans_y;{ o;	;i¥;"default-translate-y;"default_translate_y;@[o;;"perspective;"perspective;@o;*;i¦;F;@[o;;"only3d;"only3d;@o;*;i§;F;@;"translateY;&T;@o;;i®;"ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;iµ;[o;;i¶;[ ;0;"
trans;o;!
;i¶;"[o;	;i¶;"trans-z;"trans_z;@;"translateZ;@;#{ ;@u;%[o:Sass::Script::Variable	:
@linei·:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i·:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i·:@value[o:Sass::Script::Funcall
;i·:
@args[o; 	;i·;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;i·;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;i¸;[ ;"[o;	;i¸;"
trans;"
trans;@;"transform3d;@;#{ ;"[[o;;"trans-z;"trans_z;{ o;	;i³;"default-translate-z;"default_translate_z;@Ç[o;;"perspective;"perspective;@Ço;*;i´;F;@Ç;"translateZ;&T;@o;;i»;"Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;iÄ;[o;;iÅ;[ ;0;"
trans;o;!
;iÅ;"[o;	;iÅ;"translate-x;"translate_x;@o;	;iÅ;"translate-y;"translate_y;@o;	;iÅ;"translate-z;"translate_z;@;"translate3d;@;#{ ;@u;%[o:Sass::Script::Variable	:
@lineiÆ:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;iÆ:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;iÆ:@value[o:Sass::Script::Funcall
;iÆ:
@args[o; 	;iÆ;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ o; 	;iÆ;"
trans;"
trans;	@	:@separator:
space;	{ ;	@	o;+;iÇ;[ ;"[o;	;iÇ;"
trans;"
trans;@;"transform3d;@;#{ ;"[	[o;;"translate-x;"translate_x;{ o;	;iÀ;"default-translate-x;"default_translate_x;@õ[o;;"translate-y;"translate_y;@õo;	;iÁ;"default-translate-y;"default_translate_y;@õ[o;;"translate-z;"translate_z;@õo;	;iÂ;"default-translate-z;"default_translate_z;@õ[o;;"perspective;"perspective;@õo;*;iÃ;F;@õ;"translate3d;&T;@o;;iÊ;"m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */;[ ;i ;[ ;0;@o;;iÎ;"ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;iÙ;[o;;iÚ;[ ;0;"
trans;o;!
;iÚ;"[o;	;iÚ;"skew-x;"skew_x;@o;	;iÚ;"skew-y;"skew_y;@;"	skew;@;#{ ;@o;+;iÛ;[ ;"[o;	;iÛ;"
trans;"
trans;@o;	;iÛ;"only3d;"only3d;@;"transform;@;#{ ;"[[o;;"skew-x;"skew_x;{ o;	;iÖ;"default-skew-x;"default_skew_x;@4[o;;"skew-y;"skew_y;@4o;	;i×;"default-skew-y;"default_skew_y;@4[o;;"only3d;"only3d;@4o;*;iØ;F;@4;"	skew;&T;@o;;iÞ;"/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;iæ;[o;;iç;[ ;0;"
trans;o;!
;iç;"[o;	;iç;"skew-x;"skew_x;@;"
skewX;@;#{ ;@o;+;iè;[ ;"[o;	;iè;"
trans;"
trans;@o;	;iè;"only3d;"only3d;@;"transform;@;#{ ;"[[o;;"skew-x;"skew_x;{ o;	;iä;"default-skew-x;"default_skew_x;@e[o;;"only3d;"only3d;@eo;*;iå;F;@e;"
skewX;&T;@o;;ië;"/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;ió;[o;;iô;[ ;0;"
trans;o;!
;iô;"[o;	;iô;"skew-y;"skew_y;@;"
skewY;@;#{ ;@o;+;iõ;[ ;"[o;	;iõ;"
trans;"
trans;@o;	;iõ;"only3d;"only3d;@;"transform;@;#{ ;"[[o;;"skew-y;"skew_y;{ o;	;iñ;"default-skew-y;"default_skew_y;@[o;;"only3d;"only3d;@o;*;iò;F;@;"
skewY;&T;@o;;iù;"/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;[ ;0;@o;;i;[o;;i;[ ;0;"
trans;o;!
;i;"[o;'	;i;" ;(;);@;"unquote;@;#{ ;@o;;i;"/* perspective */;[ ;i ;[ ;0;@u;%.[o:Sass::Script::Variable	:
@linei:
@name"perspective:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode;i:@children[ :@guarded0;"
trans:
@expro:Sass::Script::Funcall
;i:
@args[o; 	;i;"perspective;"perspective;	@	;"perspective;	@	:@keywords{ ;	@	o;;i;"/* scale */;[ ;i ;[ ;0;@u;%Ê[o:Sass::Script::Operation
:
@linei:@operand2o:Sass::Script::Variable	;i:
@name"scale-y:@underscored_name"scale_y:@options{ :@operator:and:@operand1o;	;i;	"scale-x;
"scale_x;@
;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:
@linei:
@name"scale-x:@underscored_name"scale_x:@options{ 0[o:Sass::Tree::VariableNode;i:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i:@value[o; 	;i;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i:
@args[o; 	;i;"scale-x;"scale_x;	@	;"scaleX;	@	:@keywords{ :@separator:
space;	{ ;	@	u; v[o:Sass::Script::Variable	:
@linei :
@name"scale-y:@underscored_name"scale_y:@options{ 0[o:Sass::Tree::VariableNode;i :@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i :@value[o; 	;i ;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i :
@args[o; 	;i ;"scale-y;"scale_y;	@	;"scaleY;	@	:@keywords{ :@separator:
space;	{ ;	@	u; v[o:Sass::Script::Variable	:
@linei!:
@name"scale-z:@underscored_name"scale_z:@options{ 0[o:Sass::Tree::VariableNode;i!:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i!:@value[o; 	;i!;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i!:
@args[o; 	;i!;"scale-z;"scale_z;	@	;"scaleZ;	@	:@keywords{ :@separator:
space;	{ ;	@	[u;L[o:Sass::Script::Variable	:
@linei:
@name"scale-z:@underscored_name"scale_z:@options{ u:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:
@linei:@children[ :@guarded0:
@name"
trans:
@expro:Sass::Script::List	;i:@value[o:Sass::Script::Variable	;i;	"
trans:@underscored_name"
trans:@options{ o:Sass::Script::Funcall
;i:
@args[o;	;i;	"scale-x;"scale_x;@o;	;i;	"scale-y;"scale_y;@;	"
scale;@:@keywords{ :@separator:
space;{ ;@[o:Sass::Tree::VariableNode;i:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i:@value[o; 	;i;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i:
@args[o; 	;i;"scale-x;"scale_x;	@	o; 	;i;"scale-y;"scale_y;	@	o; 	;i;"scale-z;"scale_z;	@	;"scale3d;	@	:@keywords{ :@separator:
space;	{ ;	@	o;;i$;"/* rotate */;[ ;i ;[ ;0;@u;%{[o:Sass::Script::Variable	:
@linei%:
@name"rotate-x:@underscored_name"rotate_x:@options{ 0[o:Sass::Tree::VariableNode;i%:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i%:@value[o; 	;i%;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i%:
@args[o; 	;i%;"rotate-x;"rotate_x;	@	;"rotateX;	@	:@keywords{ :@separator:
space;	{ ;	@	u;%{[o:Sass::Script::Variable	:
@linei&:
@name"rotate-y:@underscored_name"rotate_y:@options{ 0[o:Sass::Tree::VariableNode;i&:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i&:@value[o; 	;i&;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i&:
@args[o; 	;i&;"rotate-y;"rotate_y;	@	;"rotateY;	@	:@keywords{ :@separator:
space;	{ ;	@	u;%{[o:Sass::Script::Variable	:
@linei':
@name"rotate-z:@underscored_name"rotate_z:@options{ 0[o:Sass::Tree::VariableNode;i':@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i':@value[o; 	;i';"
trans;"
trans;	@	o:Sass::Script::Funcall
;i':
@args[o; 	;i';"rotate-z;"rotate_z;	@	;"rotateZ;	@	:@keywords{ :@separator:
space;	{ ;	@	u;%|[o:Sass::Script::Variable	:
@linei(:
@name"rotate3d:@underscored_name"rotate3d:@options{ 0[o:Sass::Tree::VariableNode;i(:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i(:@value[o; 	;i(;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i(:
@args[o; 	;i(;"rotate3d;"rotate3d;	@	;"rotate3d;	@	:@keywords{ :@separator:
space;	{ ;	@	o;;i*;"/* translate */;[ ;i ;[ ;0;@u;%Þ[o:Sass::Script::Operation
:
@linei+:@operand2o:Sass::Script::Variable	;i+:
@name"trans-y:@underscored_name"trans_y:@options{ :@operator:and:@operand1o;	;i+;	"trans-x;
"trans_x;@
;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:
@linei/:
@name"trans-x:@underscored_name"trans_x:@options{ 0[o:Sass::Tree::VariableNode;i/:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i/:@value[o; 	;i/;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i/:
@args[o; 	;i/;"trans-x;"trans_x;	@	;"translateX;	@	:@keywords{ :@separator:
space;	{ ;	@	u; z[o:Sass::Script::Variable	:
@linei0:
@name"trans-y:@underscored_name"trans_y:@options{ 0[o:Sass::Tree::VariableNode;i0:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i0:@value[o; 	;i0;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i0:
@args[o; 	;i0;"trans-y;"trans_y;	@	;"translateY;	@	:@keywords{ :@separator:
space;	{ ;	@	u; z[o:Sass::Script::Variable	:
@linei1:
@name"trans-z:@underscored_name"trans_z:@options{ 0[o:Sass::Tree::VariableNode;i1:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i1:@value[o; 	;i1;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i1:
@args[o; 	;i1;"trans-z;"trans_z;	@	;"translateZ;	@	:@keywords{ :@separator:
space;	{ ;	@	[u;T[o:Sass::Script::Variable	:
@linei,:
@name"trans-z:@underscored_name"trans_z:@options{ u:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:
@linei-:@children[ :@guarded0:
@name"
trans:
@expro:Sass::Script::List	;i-:@value[o:Sass::Script::Variable	;i-;	"
trans:@underscored_name"
trans:@options{ o:Sass::Script::Funcall
;i-:
@args[o;	;i-;	"trans-x;"trans_x;@o;	;i-;	"trans-y;"trans_y;@;	"translate;@:@keywords{ :@separator:
space;{ ;@[o:Sass::Tree::VariableNode;i,:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i,:@value[o; 	;i,;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i,:
@args[o; 	;i,;"trans-x;"trans_x;	@	o; 	;i,;"trans-y;"trans_y;	@	o; 	;i,;"trans-z;"trans_z;	@	;"translate3d;	@	:@keywords{ :@separator:
space;	{ ;	@	o;;i4;"/* skew */;[ ;i ;[ ;0;@u;%[o:Sass::Script::Operation
:
@linei5:@operand2o:Sass::Script::Variable	;i5:
@name"skew-y:@underscored_name"skew_y:@options{ :@operator:and:@operand1o;	;i5;	"skew-x;
"skew_x;@
;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:
@linei7:
@name"skew-x:@underscored_name"skew_x:@options{ 0[o:Sass::Tree::VariableNode;i7:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i7:@value[o; 	;i7;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i7:
@args[o; 	;i7;"skew-x;"skew_x;	@	;"
skewX;	@	:@keywords{ :@separator:
space;	{ ;	@	u; q[o:Sass::Script::Variable	:
@linei8:
@name"skew-y:@underscored_name"skew_y:@options{ 0[o:Sass::Tree::VariableNode;i8:@children[ :@guarded0;"
trans:
@expro:Sass::Script::List	;i8:@value[o; 	;i8;"
trans;"
trans;	@	o:Sass::Script::Funcall
;i8:
@args[o; 	;i8;"skew-y;"skew_y;	@	;"
skewY;	@	:@keywords{ :@separator:
space;	{ ;	@	[o:Sass::Tree::VariableNode;i5:@children[ :@guarded0;	"
trans:
@expro:Sass::Script::List	;i5:@value[o;	;i5;	"
trans;
"
trans;@
o:Sass::Script::Funcall
;i5:
@args[o;	;i5;	"skew-x;
"skew_x;@
o;	;i5;	"skew-y;
"skew_y;@
;	"	skew;@
:@keywords{ :@separator:
space;{ ;@
o;;i;;"/* apply it! */;[ ;i ;[ ;0;@o;+;i<;[ ;"[o;	;i<;"
trans;"
trans;@o;	;i<;"only3d;"only3d;@;"transform;@;#{ o;+;i=;[ ;"[	o;	;i=;"origin-x;"origin_x;@o;	;i=;"origin-y;"origin_y;@o;	;i=;"origin-z;"origin_z;@o;	;i=;"only3d;"only3d;@;"transform-origin;@;#{ ;"[[o;;"perspective;"perspective;{ o;*;i;F;@é[o;;"scale-x;"scale_x;@éo;*;i;F;@é[o;;"scale-y;"scale_y;@éo;*;i;F;@é[o;;"scale-z;"scale_z;@éo;*;i;F;@é[o;;"rotate-x;"rotate_x;@éo;*;i;F;@é[o;;"rotate-y;"rotate_y;@éo;*;i;F;@é[o;;"rotate-z;"rotate_z;@éo;*;i	;F;@é[o;;"rotate3d;"rotate3d;@éo;*;i
;F;@é[o;;"trans-x;"trans_x;@éo;*;i;F;@é[o;;"trans-y;"trans_y;@éo;*;i;F;@é[o;;"trans-z;"trans_z;@éo;*;i;F;@é[o;;"skew-x;"skew_x;@éo;*;i;F;@é[o;;"skew-y;"skew_y;@éo;*;i;F;@é[o;;"origin-x;"origin_x;@éo;*;i;F;@é[o;;"origin-y;"origin_y;@éo;*;i;F;@é[o;;"origin-z;"origin_z;@éo;*;i;F;@é[o;;"only3d;"only3d;@éo;*;i;F;@é;"create-transform;&T;@o;;iA;"q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */;[ ;i ;[ ;0;@o;;iL;[o;+;iU;[ ;"[o;*;iN;F;@o;	;iO;"
scale;"
scale;@o;	;iO;"
scale;"
scale;@o;*;iO;F;@o;*;iP;F;@o;*;iP;F;@o;	;iP;"rotate;"rotate;@o;*;iP;F;@o;	;iQ;"trans-x;"trans_x;@o;	;iQ;"trans-y;"trans_y;@o;*;iQ;F;@o;	;iR;"skew-x;"skew_x;@o;	;iR;"skew-y;"skew_y;@o;	;iS;"origin-x;"origin_x;@o;	;iS;"origin-y;"origin_y;@o;*;iS;F;@o;*;iT;F;@;"create-transform;@;#{ ;"[[o;;"
scale;"
scale;{ o;*;iD;F;@o[o;;"rotate;"rotate;@oo;*;iE;F;@o[o;;"trans-x;"trans_x;@oo;*;iF;F;@o[o;;"trans-y;"trans_y;@oo;*;iG;F;@o[o;;"skew-x;"skew_x;@oo;*;iH;F;@o[o;;"skew-y;"skew_y;@oo;*;iI;F;@o[o;;"origin-x;"origin_x;@oo;*;iJ;F;@o[o;;"origin-y;"origin_y;@oo;*;iK;F;@o;"simple-transform;&T;@;&T;@